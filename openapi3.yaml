openapi: 3.0.1
info:
  title: Job Manager Service
  description: Job Manager Service
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /jobs:
    get:
      operationId: findJobs
      parameters:
        - $ref: '#/components/parameters/jmode'
        - $ref: '#/components/parameters/jname'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/tillDate'
        - $ref: '#/components/parameters/priority'
        - $ref: '#/components/parameters/creator'
      summary: find jobs by criteria
      tags:
        - jobs
      responses:
        '200':
          description: Array of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/jobResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
    post:
      operationId: createJob
      summary: Creates a new job
      tags:
        - jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createJobPayload'
      responses:
        '201':
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createJobResponse'
        '400':
          description: Invalid request, could not create job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /jobs/{jobId}:
    parameters:
      - $ref: '#/components/parameters/jobId'
    get:
      operationId: getJobById
      summary: Get job by id
      tags:
        - jobs
      responses:
        '200':
          description: Job data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobResponse'
        '400':
          description: Invalid request, could not get job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /jobs/{jobId}/user-metadata:
    patch:
      operationId: updateUserMetadata
      parameters:
        - $ref: '#/components/parameters/jobId'
      summary: update user metadata object
      tags:
        - jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userMetadata'
      responses:
        '200':
          description: modify user metadata object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultOkMessage'
              example:
                code: JOB_MODIFIED_SUCCESSFULLY
        '400':
          description: Bad parameters input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '404':
          description: No such stage on database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /jobs/{jobId}/priority:
    parameters:
      - $ref: '#/components/parameters/jobId'
    patch:
      operationId: updateJobPriority
      summary: change priority
      tags:
        - jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                priority:
                  $ref: '#/components/schemas/priority'
              required:
                - priority
      responses:
        '200':
          description: The job priority was changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultOkMessage'
              example:
                code: JOB_MODIFIED_SUCCESSFULLY
        '204':
          description: The priority was not changed, likely because the priority requested is equal to the current one.
          headers:
            Reason:
              description: Won't change priority if equal to current
              schema:
                type: string
          content: {}
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
  /jobs/{jobId}/status:
    parameters:
      - $ref: '#/components/parameters/jobId'
    put:
      operationId: updateStatus
      summary: change job's status
      tags:
        - jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/jobOperationStatus'
              required:
                - status
      responses:
        '200':
          description: Change job and related stages + tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/defaultOkMessage'
              example:
                code: JOB_MODIFIED_SUCCESSFULLY
        '400':
          description: Bad parameters input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '404':
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorMessage'
security: []

components:
  parameters:
    jobId:
      in: path
      name: jobId
      description: ID of Job
      required: true
      schema:
        $ref: '#/components/schemas/jobId'
    # stageId:
    #   in: path
    #   name: stageId
    #   description: ID of Stage
    #   required: true
    #   schema:
    #     $ref: '#/components/schemas/stageId'
    # taskId:
    #   in: path
    #   name: taskId
    #   description: ID of requested task
    #   required: true
    #   schema:
    #     type: string
    # taskType:
    #   in: path
    #   name: taskType
    #   description: ID of requested task
    #   required: true
    #   schema:
    #     $ref: '#/components/schemas/taskType'
    # status:
    #   in: query
    #   name: status
    #   description: |
    #     The status of the job.
    #   required: false
    #   schema:
    #     $ref: '#/components/schemas/status'
    jmode:
      in: query
      name: job_mode
      description: |
        The mode of the job.
      required: false
      schema:
        $ref: '#/components/schemas/jobMode'
    jname:
      in: query
      name: job_name
      description: |
        The type name of the job.
      required: false
      schema:
        $ref: '#/components/schemas/jobName'
    priority:
      in: query
      name: priority
      description: |
        The type of the job.
      required: false
      schema:
        $ref: '#/components/schemas/priority'
    creator:
      in: query
      name: creator
      description: |
        Name of job creator
      required: false
      schema:
        $ref: '#/components/schemas/creator'
    fromDate:
      in: query
      name: from_date
      description: results start update date
      required: false
      schema:
        type: string
        format: date-time
    tillDate:
      in: query
      name: till_date
      description: results end update date
      required: false
      schema:
        type: string
        format: date-time
    # sId:
    #   in: query
    #   name: stage_id
    #   description: unique stage identifier
    #   required: false
    #   schema:
    #     $ref: '#/components/schemas/stageId'
    # jId:
    #   in: query
    #   name: job_id
    #   description: unique job identifier
    #   required: false
    #   schema:
    #     $ref: '#/components/schemas/jobId'
    # sType:
    #   in: query
    #   name: stage_type
    #   description: stage's type
    #   required: false
    #   schema:
    #     $ref: '#/components/schemas/taskType'
    # tType:
    #   in: query
    #   name: task_type
    #   description: task's type
    #   required: false
    #   schema:
    #     $ref: '#/components/schemas/taskType'
    # jobName:
    #   in: path
    #   name: jobName
    #   description: the type of the job
    #   required: true
    #   schema:
    #     $ref: '#/components/schemas/jobName'
  schemas:
    creationTime:
      type: string
      format: date-time
    updateTime:
      type: string
      format: date-time
    expirationTime:
      type: string
      format: date-time
      nullable: true
    ttl:
      type: string
      format: date-time
      nullable: true
    jobId:
      type: string
      format: uuid
    jobPayload:
      type: object
      additionalProperties: true
    percentage:
      type: integer
      minimum: 0
      maximum: 100
    attempts:
      type: integer
    stageId:
      type: string
      format: uuid
    stagePayload:
      type: object
    notifications:
      type: object
    priority:
      type: string
      enum:
        - VERY_HIGH
        - HIGH
        - MEDIUM
        - LOW
        - VERY_LOW
      example: LOW
    successMessages:
      type: string
      enum:
        - JOB_MODIFIED_SUCCESSFULLY
        # - TTL_MODIFIED_SUCCESSFULLY
        # - JOB_RESTARTED_SUCCESSFULLY
        # - STAGE_MODIFIED_SUCCESSFULLY
        # - STATUS_MODIFIED_SUCCESSFULLY
        # - USER_METADATA_MODIFIED_SUCCESSFULLY
        # - TASKS_ADDED_SUCCESSFULLY
        # - TASK_FAILED_SUCCESSFULLY
        # - TASK_COMPLETED_SUCCESSFULLY
      example: JOB_MODIFIED_SUCCESSFULLY
    creator:
      type: string
      enum:
        - MAP_COLONIES
        - UNKNOWN
    jobOperationStatus:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - ABORTED
        - PAUSED
        - WAITING
        - CREATED
      example: CREATED
    # stageOperationStatus:
    #   type: string
    #   enum:
    #     - PENDING
    #     - IN_PROGRESS
    #     - COMPLETED
    #     - FAILED
    #     - ABORTED
    #     - PAUSED
    #     - WAITING
    #     - CREATED
    #   example: CREATED
    taskOperationStatus:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - COMPLETED
        - FAILED
        - ABORTED
        - PAUSED
        - WAITING
        - CREATED
        - RETRIED
      example: CREATED
    jobMode:
      type: string
      enum:
        - PRE_DEFINED
        - DYNAMIC
      example: PRE_DEFINED
    jobName:
      type: string
      enum:
        - INGESTION
        - EXPORT
        - DEFAULT
      example: DEFAULT
    userMetadata:
      type: object
      additionalProperties: true
    summary:
      type: object
    createJobPayload:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/jobMode'
        name:
          $ref: '#/components/schemas/jobName'
        data:
          $ref: '#/components/schemas/jobPayload'
        priority:
          $ref: '#/components/schemas/priority'
        expirationTime:
          $ref: '#/components/schemas/expirationTime'
        ttl:
          $ref: '#/components/schemas/ttl'
        notifications:
          $ref: '#/components/schemas/notifications'
        userMetadata:
          $ref: '#/components/schemas/userMetadata'
        creator:
          $ref: '#/components/schemas/creator'
      required:
        - data
        - type
        - creator
        - userMetadata
        - notifications
      additionalProperties: true
    jobResponse:
      allOf:
        - $ref: '#/components/schemas/createJobPayload'
        - type: object
          required:
            - id
            - name
          description: job Response model
          properties:
            id:
              $ref: '#/components/schemas/jobId'
            percentage:
              $ref: '#/components/schemas/percentage'
            creationTime:
              $ref: '#/components/schemas/creationTime'
            updateTime:
              $ref: '#/components/schemas/updateTime'
    createStagePayload:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/taskType'
        data:
          $ref: '#/components/schemas/stagePayload'
        jobId:
          $ref: '#/components/schemas/jobId'
        userMetadata:
          $ref: '#/components/schemas/userMetadata'
      required:
        - data
        - type
        - jobId
      additionalProperties: false
    stageResponse:
      allOf:
        - $ref: '#/components/schemas/createStagePayload'
        - type: object
          required:
            - id
          properties:
            id:
              $ref: '#/components/schemas/stageId'
            summary:
              $ref: '#/components/schemas/summary'
            percentage:
              $ref: '#/components/schemas/percentage'
    taskId:
      type: string
      format: uuid
    taskType:
      type: string
      enum:
        - Tile-Merging
        - Tile-Seeding
        - Tile-Exporting
      maxLength: 255
      example: Tile-Merging
    taskPayload:
      type: object
    createTaskPayload:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/taskType'
        data:
          $ref: '#/components/schemas/taskPayload'
        taskOperationStatus:
          $ref: '#/components/schemas/taskOperationStatus'
        stageId:
          $ref: '#/components/schemas/stageId'
      required:
        - data
        - type
        - stageId
      additionalProperties: false
    taskResponse:
      allOf:
        - $ref: '#/components/schemas/createTaskPayload'
      type: object
      required:
        - id
        - stageId
        - taskOperationStatus
      properties:
        id:
          $ref: '#/components/schemas/taskId'
        creationTime:
          $ref: '#/components/schemas/creationTime'
        updateTime:
          $ref: '#/components/schemas/updateTime'
        taskOperationStatus:
          $ref: '#/components/schemas/taskOperationStatus'
        attempts:
          $ref: '#/components/schemas/attempts'
        priority:
          $ref: '#/components/schemas/priority'
    createJobResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/jobId'
        data:
          $ref: '#/components/schemas/jobPayload'
        status:
          $ref: '#/components/schemas/jobOperationStatus'
        percentage:
          $ref: '#/components/schemas/percentage'
        creationTime:
          $ref: '#/components/schemas/creationTime'
        updateTime:
          $ref: '#/components/schemas/updateTime'
        expirationTime:
          $ref: '#/components/schemas/expirationTime'
        type:
          $ref: '#/components/schemas/jobMode'
        userMetadata:
          $ref: '#/components/schemas/userMetadata'
        priority:
          $ref: '#/components/schemas/priority'
        creator:
          $ref: '#/components/schemas/creator'
        ttl:
          $ref: '#/components/schemas/ttl'
        notifications:
          $ref: '#/components/schemas/notifications'
        name:
          $ref: '#/components/schemas/jobName'

      additionalProperties: false
      required:
        - id
    errorMessage:
      type: object
      properties:
        'message:':
          type: string
        stacktrace:
          type: string
      required:
        - message
    defaultOkMessage:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/successMessages'
      required:
        - code
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
